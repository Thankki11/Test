import React, { useEffect, useState } from "react";
import axios from "axios";

const defaultQuestions = [
  { question: "gi·ªù m·ªü c·ª≠a", answer: "Nh√† h√†ng m·ªü c·ª≠a t·ª´ 8h ƒë·∫øn 22h m·ªói ng√†y." },
  { question: "ƒë·∫∑t b√†n", answer: "B·∫°n c√≥ th·ªÉ ƒë·∫∑t b√†n qua m·ª•c ƒê·∫∑t b√†n tr√™n menu ho·∫∑c nh·∫Øn 'ƒë·∫∑t b√†n' cho t√¥i!" },
  { question: "gi·ªè h√†ng", answer: "B·∫°n h√£y nh·∫•n v√†o n√∫t gi·ªè h√†ng ·ªü g√≥c tr√™n ho·∫∑c nh·∫Øn 'gi·ªè h√†ng' cho t√¥i." },
];

function ChatBot() {
  const [messages, setMessages] = useState([
    { from: "bot", text: "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?" }
  ]);
  const [input, setInput] = useState("");
  const [menus, setMenus] = useState([]);
  const [orders, setOrders] = useState([]);
  const [cart, setCart] = useState([]);
  const [open, setOpen] = useState(false); // tr·∫°ng th√°i m·ªü/ƒë√≥ng chat

  useEffect(() => {
    axios.get("http://localhost:3001/api/menus")
      .then(res => setMenus(res.data))
      .catch(() => setMenus([]));

    const token = localStorage.getItem("token");
    if (token) {
      axios.get("http://localhost:3001/api/orders/my-orders", {
        headers: { Authorization: `Bearer ${token}` }
      })
        .then(res => setOrders(res.data))
        .catch(() => setOrders([]));
    }

    const cartId = localStorage.getItem("cartId") || "67fb8e201f70bf74520565e7";
    axios.get(`http://localhost:3001/api/cart?id=${cartId}`)
      .then(res => setCart(res.data.items || []))
      .catch(() => setCart([]));
  }, []);

  const handleSend = () => {
    if (!input.trim()) return;
    const userMsg = { from: "user", text: input };
    setMessages((msgs) => [...msgs, userMsg]);
    handleBotReply(input);
    setInput("");
  };

  const handleBotReply = (msg) => {
    const lower = msg.toLowerCase();

    // T√¨m m√≥n ƒÉn
    if (lower.includes("t√¨m") || lower.includes("m√≥n")) {
      const keyword = lower.replace("t√¨m", "").replace("m√≥n", "").trim();
      if (keyword && menus.length > 0) {
        const found = menus.filter(m => m.name.toLowerCase().includes(keyword));
        if (found.length > 0) {
          // N·∫øu ch·ªâ t√¨m th·∫•y 1 m√≥n
          if (found.length === 1) {
            setMessages(msgs => [
              ...msgs,
              {
                from: "bot",
                text: (
                  <>
                    T√¥i t√¨m th·∫•y: <a href={`/detail/${found[0]._id}`} target="_blank" rel="noopener noreferrer">{found[0].name}</a>
                  </>
                )
              }
            ]);
          } else {
            // Nhi·ªÅu m√≥n, hi·ªán t·ª´ng m√≥n v·ªõi link
            setMessages(msgs => [
              ...msgs,
              {
                from: "bot",
                text: (
                  <span>
                    T√¥i t√¨m th·∫•y:<br />
                    {found.map(item => (
                      <div key={item._id}>
                        <a href={`/detail/${item._id}`} target="_blank" rel="noopener noreferrer">{item.name}</a>
                      </div>
                    ))}
                  </span>
                )
              }
            ]);
          }
        } else {
          setMessages(msgs => [...msgs, { from: "bot", text: "Kh√¥ng t√¨m th·∫•y m√≥n n√†o ph√π h·ª£p." }]);
        }
        return;
      }
    }

    // H√≥a ƒë∆°n nhi·ªÅu ti·ªÅn nh·∫•t
    if (lower.includes("h√≥a ƒë∆°n nhi·ªÅu ti·ªÅn nh·∫•t")) {
      if (orders.length > 0) {
        const maxOrder = orders.reduce((prev, curr) => (curr.totalPrice > prev.totalPrice ? curr : prev));
        setMessages(msgs => [
          ...msgs,
          { from: "bot", text: `H√≥a ƒë∆°n nhi·ªÅu ti·ªÅn nh·∫•t: $${maxOrder.totalPrice}, tr·∫°ng th√°i: ${maxOrder.status}` }
        ]);
      } else {
        setMessages(msgs => [...msgs, { from: "bot", text: "B·∫°n ch∆∞a c√≥ h√≥a ƒë∆°n n√†o." }]);
      }
      return;
    }

    // H√≥a ƒë∆°n √≠t ti·ªÅn nh·∫•t
    if (lower.includes("h√≥a ƒë∆°n √≠t ti·ªÅn nh·∫•t")) {
      if (orders.length > 0) {
        const minOrder = orders.reduce((prev, curr) => (curr.totalPrice < prev.totalPrice ? curr : prev));
        setMessages(msgs => [
          ...msgs,
          { from: "bot", text: `H√≥a ƒë∆°n √≠t ti·ªÅn nh·∫•t: $${minOrder.totalPrice}, tr·∫°ng th√°i: ${minOrder.status}` }
        ]);
      } else {
        setMessages(msgs => [...msgs, { from: "bot", text: "B·∫°n ch∆∞a c√≥ h√≥a ƒë∆°n n√†o." }]);
      }
      return;
    }

    // H√≥a ƒë∆°n ƒëang v·∫≠n chuy·ªÉn
    if (lower.includes("ƒëang v·∫≠n chuy·ªÉn")) {
      const deliveringOrders = orders.filter(order => order.status === "delivering");
      if (deliveringOrders.length > 0) {
        setMessages(msgs => [
          ...msgs,
          { from: "bot", text: `B·∫°n c√≥ ${deliveringOrders.length} h√≥a ƒë∆°n ƒëang v·∫≠n chuy·ªÉn.` }
        ]);
      } else {
        setMessages(msgs => [...msgs, { from: "bot", text: "B·∫°n kh√¥ng c√≥ h√≥a ƒë∆°n n√†o ƒëang v·∫≠n chuy·ªÉn." }]);
      }
      return;
    }

    // H√≥a ƒë∆°n ƒëang x√°c nh·∫≠n
    if (lower.includes("ƒëang x√°c nh·∫≠n")) {
      const pendingOrders = orders.filter(order => order.status === "pending");
      if (pendingOrders.length > 0) {
        setMessages(msgs => [
          ...msgs,
          { from: "bot", text: `B·∫°n c√≥ ${pendingOrders.length} h√≥a ƒë∆°n ƒëang x√°c nh·∫≠n.` }
        ]);
      } else {
        setMessages(msgs => [...msgs, { from: "bot", text: "B·∫°n kh√¥ng c√≥ h√≥a ƒë∆°n n√†o ƒëang x√°c nh·∫≠n." }]);
      }
      return;
    }

    // T·ªïng s·ªë ti·ªÅn ƒë√£ mua
    if (lower.includes("t·ªïng s·ªë ti·ªÅn ƒë√£ mua")) {
      const totalSpent = orders.reduce((sum, order) => sum + order.totalPrice, 0);
      setMessages(msgs => [
        ...msgs,
        { from: "bot", text: `T·ªïng s·ªë ti·ªÅn b·∫°n ƒë√£ mua: $${totalSpent}` }
      ]);
      return;
    }

    // M·∫∑c ƒë·ªãnh
    setMessages(msgs => [...msgs, { from: "bot", text: "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu √Ω b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ m√≥n ƒÉn, h√≥a ƒë∆°n, gi·ªè h√†ng ho·∫∑c c√°c th√¥ng tin c∆° b·∫£n." }]);
  };

  // Bong b√≥ng chat
  if (!open) {
    return (
      <button
        onClick={() => setOpen(true)}
        style={{
          position: "fixed",
          bottom: 24,
          right: 24,
          width: 60,
          height: 60,
          borderRadius: "50%",
          background: "#007cf0",
          color: "#fff",
          border: "none",
          boxShadow: "0 4px 24px #0002",
          zIndex: 9999,
          cursor: "pointer",
          fontSize: 28,
          display: "flex",
          alignItems: "center",
          justifyContent: "center"
        }}
        title="Chatbot h·ªó tr·ª£"
      >
        üí¨
      </button>
    );
  }

  // Khung chat
  return (
    <div style={{
      position: "fixed", bottom: 24, right: 24, width: 340, zIndex: 9999,
      background: "#fff", borderRadius: 12, boxShadow: "0 4px 24px #0002", overflow: "hidden"
    }}>
      <div style={{ background: "#007cf0", color: "#fff", padding: 12, fontWeight: "bold", display: "flex", justifyContent: "space-between", alignItems: "center" }}>
        <span>Chatbot H·ªó tr·ª£</span>
        <button
          onClick={() => setOpen(false)}
          style={{
            background: "transparent",
            border: "none",
            color: "#fff",
            fontSize: 22,
            cursor: "pointer",
            marginLeft: 8
          }}
          title="Thu nh·ªè"
        >
          &minus;
        </button>
      </div>
      <div style={{ maxHeight: 320, overflowY: "auto", padding: 12 }}>
        {messages.map((msg, idx) => (
          <div key={idx} style={{ textAlign: msg.from === "bot" ? "left" : "right", margin: "8px 0" }}>
            {typeof msg.text === "string" ? (
              <span style={{
                display: "inline-block",
                background: msg.from === "bot" ? "#f1f1f1" : "#bde5ff",
                color: "#222",
                borderRadius: 8,
                padding: "6px 12px",
                maxWidth: "80%"
              }}>{msg.text}</span>
            ) : (
              <span style={{
                display: "inline-block",
                background: msg.from === "bot" ? "#f1f1f1" : "#bde5ff",
                color: "#222",
                borderRadius: 8,
                padding: "6px 12px",
                maxWidth: "80%"
              }}>{msg.text}</span>
            )}
          </div>
        ))}
      </div>
      <div style={{ borderTop: "1px solid #eee", display: "flex" }}>
        <input
          value={input}
          onChange={e => setInput(e.target.value)}
          onKeyDown={e => e.key === "Enter" && handleSend()}
          placeholder="Nh·∫≠p c√¢u h·ªèi..."
          style={{ flex: 1, border: "none", padding: 10, outline: "none" }}
        />
        <button onClick={handleSend} style={{ background: "#007cf0", color: "#fff", border: "none", padding: "0 16px" }}>
          G·ª≠i
        </button>
      </div>
    </div>
  );
}

export default ChatBot;